datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  avatar        String?
  role          String         @default("USER")
  isVerified    Boolean        @default(true)
  refreshToken  String?        // Otomatik giriş için eklenen alan
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]       @relation("Following")
  following     Follow[]       @relation("Followers")
  notifications Notification[]
}

model Post {
  id            String         @id @default(uuid())
  content       String
  media         String[]
  likes         Like[]
  comments      Comment[]
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  likes     Like[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  type      String   // 'like', 'comment', 'follow'
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  createdAt DateTime @default(now())
}